"""
Django settings for mreg project.

Generated by 'django-admin startproject' using Django 2.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import sys

import mreg.log_processors

import structlog

TESTING = len(sys.argv) > 1 and sys.argv[1] == "test"

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ")e#67040xjxar=zl^y#@#b*zilv2dxtraj582$^(e6!wf++_n#"

MREG_LOG_LEVEL = os.environ.get("MREG_LOG_LEVEL", "CRITICAL").upper()

REQUESTS_THRESHOLD_SLOW = 1000
REQUESTS_LOG_LEVEL_SLOW = "WARNING"

REQUESTS_THRESHOLD_VERY_SLOW = 5000
REQUESTS_LOG_LEVEL_VERY_SLOW = "CRITICAL"

LOGGING_MAX_BODY_LENGTH = 3000

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if "CI" in os.environ else False

# The IP addresses that can access this instance.  Ignored if DEBUG
# is True.
ALLOWED_HOSTS = ["127.0.0.1", "localhost"]

AUTH_USER_MODEL = "mreg.User"

AUTHENTICATION_BACKENDS = (
    "django_auth_ldap.backend.LDAPBackend",
    "django.contrib.auth.backends.ModelBackend",
)

AUTH_LDAP_SERVER_URI = "ldap://ldap.example.com"
AUTH_LDAP_USER_DN_TEMPLATE = "uid=%(user)s,ou=users,dc=example,dc=com"
AUTH_LDAP_START_TLS = True
AUTH_LDAP_CACHE_TIMEOUT = 3600

# Used by signals.py populate_user_from_ldap to match attributes
# via a regexp to groups, which are added to the logged in user.
LDAP_GROUP_ATTR = "memberof"
# LDAP_GROUP_RE must include a named group with name "group_name".
LDAP_GROUP_RE = r"""^cn=(?P<group_name>[\w\-]+),cn=netgroups,"""

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "netfields",
    "mreg",
    "hostpolicy",
]

MIDDLEWARE = [
    "mreg.middleware.context.ContextMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "mreg.middleware.logging_http.LoggingMiddleware",
]

ROOT_URLCONF = "mregsite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mregsite.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("MREG_DB_NAME", "mreg"),
        "USER": os.environ.get("MREG_DB_USER", "mreg"),
        "PASSWORD": os.environ.get("MREG_DB_PASSWORD", ""),
        "HOST": os.environ.get("MREG_DB_HOST", "localhost"),
        "PORT": os.environ.get("MREG_DB_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Oslo"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static/")


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "mreg.authentication.ExpiringTokenAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "mreg.api.v1.pagination.StandardResultsSetPagination",
    "DEFAULT_PERMISSION_CLASSES": ("mreg.api.permissions.IsAuthenticatedAndReadOnly",),
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.openapi.AutoSchema",
}

REST_FRAMEWORK_EXTENSIONS = {
    "DEFAULT_OBJECT_ETAG_FUNC": "rest_framework_extensions.utils.default_object_etag_func",
    "DEFAULT_LIST_ETAG_FUNC": "rest_framework_extensions.utils.default_list_etag_func",
}

# TXT record(s) automatically added to a host when added to a ForwardZone.
TXT_AUTO_RECORDS = {
    "example.org": ("v=spf1 -all",),
}

# Example of how MQ settings would look (put yours in local_settings.py)
# MQ_CONFIG = {
#    "host": "...",
#    "ssl": True/False,
#    "virtual_host": "...",
#    "exchange": "...",
#    "declare": True/False,
#    "username": "...",
#    "password": "...",
# }

processors = [
    mreg.log_processors.filter_sensitive_data,
    structlog.stdlib.filter_by_level,
    structlog.stdlib.add_log_level,
    structlog.stdlib.add_logger_name,
    structlog.processors.TimeStamper(fmt="iso"),
    structlog.processors.StackInfoRenderer(),
    structlog.processors.format_exc_info,
    structlog.processors.StackInfoRenderer(),
    structlog.processors.UnicodeDecoder(),
    mreg.log_processors.add_request_id_processor,
]

if TESTING or DEBUG:
    # If we are dumping to console, shorten the request_id and reorder keys to
    # ensure that context_id comes first.
    # We also give unique request_ids colored bubbles for easy tracking.
    processors.extend(
        [
            mreg.log_processors.collapse_request_id_processor,
            mreg.log_processors.reorder_keys_processor,
            mreg.log_processors.RequestColorTracker(),
            structlog.dev.ConsoleRenderer(colors=True, sort_keys=False),
        ]
    )
else:
    processors.append(structlog.processors.JSONRenderer())

structlog.configure(
    processors=processors,
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "console": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processor": structlog.dev.ConsoleRenderer(),
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "console",
            "level": "DEBUG",
        },
    },
    "loggers": {
        "mreg": {
            "handlers": ["console"],
            "level": MREG_LOG_LEVEL,
            "propagate": False,
        },
    },
}

# Import local settings that may override those in this file.
try:
    from .local_settings import *  # noqa: F401,F403
except ImportError:
    pass

if TESTING or "CI" in os.environ:
    SUPERUSER_GROUP = "default-super-group"
    ADMINUSER_GROUP = "default-admin-group"
    GROUPADMINUSER_GROUP = "default-groupadmin-group"
    NETWORK_ADMIN_GROUP = "default-networkadmin-group"
    HOSTPOLICYADMIN_GROUP = "default-hostpolicyadmin-group"
    DNS_WILDCARD_GROUP = "default-dns-wildcard-group"
